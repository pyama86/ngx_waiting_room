// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/waitingroom.go
//
// Generated by this command:
//
//	mockgen -package=repository -source=./repository/waitingroom.go -destination=./repository/waitingroom_mock.go WaitingroomRepositoryer
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockWaitingroomRepositoryer is a mock of WaitingroomRepositoryer interface.
type MockWaitingroomRepositoryer struct {
	ctrl     *gomock.Controller
	recorder *MockWaitingroomRepositoryerMockRecorder
	isgomock struct{}
}

// MockWaitingroomRepositoryerMockRecorder is the mock recorder for MockWaitingroomRepositoryer.
type MockWaitingroomRepositoryerMockRecorder struct {
	mock *MockWaitingroomRepositoryer
}

// NewMockWaitingroomRepositoryer creates a new mock instance.
func NewMockWaitingroomRepositoryer(ctrl *gomock.Controller) *MockWaitingroomRepositoryer {
	mock := &MockWaitingroomRepositoryer{ctrl: ctrl}
	mock.recorder = &MockWaitingroomRepositoryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaitingroomRepositoryer) EXPECT() *MockWaitingroomRepositoryerMockRecorder {
	return m.recorder
}

// AddWhiteListDomain mocks base method.
func (m *MockWaitingroomRepositoryer) AddWhiteListDomain(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWhiteListDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWhiteListDomain indicates an expected call of AddWhiteListDomain.
func (mr *MockWaitingroomRepositoryerMockRecorder) AddWhiteListDomain(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWhiteListDomain", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).AddWhiteListDomain), arg0, arg1)
}

// AppendPermitNumber mocks base method.
func (m *MockWaitingroomRepositoryer) AppendPermitNumber(arg0 context.Context, arg1 string, arg2 int64, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendPermitNumber", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendPermitNumber indicates an expected call of AppendPermitNumber.
func (mr *MockWaitingroomRepositoryerMockRecorder) AppendPermitNumber(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendPermitNumber", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).AppendPermitNumber), arg0, arg1, arg2, arg3)
}

// DisableDomain mocks base method.
func (m *MockWaitingroomRepositoryer) DisableDomain(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableDomain indicates an expected call of DisableDomain.
func (mr *MockWaitingroomRepositoryerMockRecorder) DisableDomain(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDomain", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).DisableDomain), arg0, arg1)
}

// EnableDomain mocks base method.
func (m *MockWaitingroomRepositoryer) EnableDomain(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDomain", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableDomain indicates an expected call of EnableDomain.
func (mr *MockWaitingroomRepositoryerMockRecorder) EnableDomain(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDomain", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).EnableDomain), arg0, arg1, arg2)
}

// Exists mocks base method.
func (m *MockWaitingroomRepositoryer) Exists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockWaitingroomRepositoryerMockRecorder) Exists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).Exists), arg0, arg1)
}

// ExtendCurrentNumberTTL mocks base method.
func (m *MockWaitingroomRepositoryer) ExtendCurrentNumberTTL(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendCurrentNumberTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendCurrentNumberTTL indicates an expected call of ExtendCurrentNumberTTL.
func (mr *MockWaitingroomRepositoryerMockRecorder) ExtendCurrentNumberTTL(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendCurrentNumberTTL", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).ExtendCurrentNumberTTL), arg0, arg1, arg2)
}

// ExtendDomainsTTL mocks base method.
func (m *MockWaitingroomRepositoryer) ExtendDomainsTTL(arg0 context.Context, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendDomainsTTL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendDomainsTTL indicates an expected call of ExtendDomainsTTL.
func (mr *MockWaitingroomRepositoryerMockRecorder) ExtendDomainsTTL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendDomainsTTL", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).ExtendDomainsTTL), arg0, arg1)
}

// GetCurrentNumber mocks base method.
func (m *MockWaitingroomRepositoryer) GetCurrentNumber(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentNumber", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentNumber indicates an expected call of GetCurrentNumber.
func (mr *MockWaitingroomRepositoryerMockRecorder) GetCurrentNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentNumber", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).GetCurrentNumber), arg0, arg1)
}

// GetCurrentPermitNumber mocks base method.
func (m *MockWaitingroomRepositoryer) GetCurrentPermitNumber(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentPermitNumber", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentPermitNumber indicates an expected call of GetCurrentPermitNumber.
func (mr *MockWaitingroomRepositoryerMockRecorder) GetCurrentPermitNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPermitNumber", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).GetCurrentPermitNumber), arg0, arg1)
}

// GetCurrentPermitNumberTTL mocks base method.
func (m *MockWaitingroomRepositoryer) GetCurrentPermitNumberTTL(arg0 context.Context, arg1 string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentPermitNumberTTL", arg0, arg1)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentPermitNumberTTL indicates an expected call of GetCurrentPermitNumberTTL.
func (mr *MockWaitingroomRepositoryerMockRecorder) GetCurrentPermitNumberTTL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPermitNumberTTL", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).GetCurrentPermitNumberTTL), arg0, arg1)
}

// GetEnableDomains mocks base method.
func (m *MockWaitingroomRepositoryer) GetEnableDomains(arg0 context.Context, arg1, arg2 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnableDomains", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnableDomains indicates an expected call of GetEnableDomains.
func (mr *MockWaitingroomRepositoryerMockRecorder) GetEnableDomains(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnableDomains", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).GetEnableDomains), arg0, arg1, arg2)
}

// GetEnableDomainsCount mocks base method.
func (m *MockWaitingroomRepositoryer) GetEnableDomainsCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnableDomainsCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnableDomainsCount indicates an expected call of GetEnableDomainsCount.
func (mr *MockWaitingroomRepositoryerMockRecorder) GetEnableDomainsCount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnableDomainsCount", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).GetEnableDomainsCount), arg0)
}

// GetLastNumber mocks base method.
func (m *MockWaitingroomRepositoryer) GetLastNumber(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastNumber", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastNumber indicates an expected call of GetLastNumber.
func (mr *MockWaitingroomRepositoryerMockRecorder) GetLastNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastNumber", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).GetLastNumber), arg0, arg1)
}

// GetWhiteListDomains mocks base method.
func (m *MockWaitingroomRepositoryer) GetWhiteListDomains(arg0 context.Context, arg1, arg2 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhiteListDomains", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhiteListDomains indicates an expected call of GetWhiteListDomains.
func (mr *MockWaitingroomRepositoryerMockRecorder) GetWhiteListDomains(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhiteListDomains", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).GetWhiteListDomains), arg0, arg1, arg2)
}

// GetWhiteListDomainsCount mocks base method.
func (m *MockWaitingroomRepositoryer) GetWhiteListDomainsCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhiteListDomainsCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhiteListDomainsCount indicates an expected call of GetWhiteListDomainsCount.
func (mr *MockWaitingroomRepositoryerMockRecorder) GetWhiteListDomainsCount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhiteListDomainsCount", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).GetWhiteListDomainsCount), arg0)
}

// IncrCurrentNumber mocks base method.
func (m *MockWaitingroomRepositoryer) IncrCurrentNumber(arg0 context.Context, arg1 string, arg2 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrCurrentNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrCurrentNumber indicates an expected call of IncrCurrentNumber.
func (mr *MockWaitingroomRepositoryerMockRecorder) IncrCurrentNumber(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrCurrentNumber", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).IncrCurrentNumber), arg0, arg1, arg2)
}

// IsWhiteListDomain mocks base method.
func (m *MockWaitingroomRepositoryer) IsWhiteListDomain(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWhiteListDomain", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWhiteListDomain indicates an expected call of IsWhiteListDomain.
func (mr *MockWaitingroomRepositoryerMockRecorder) IsWhiteListDomain(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWhiteListDomain", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).IsWhiteListDomain), arg0, arg1)
}

// PermitClient mocks base method.
func (m *MockWaitingroomRepositoryer) PermitClient(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermitClient", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PermitClient indicates an expected call of PermitClient.
func (mr *MockWaitingroomRepositoryerMockRecorder) PermitClient(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermitClient", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).PermitClient), arg0, arg1, arg2)
}

// RemoveWhiteListDomain mocks base method.
func (m *MockWaitingroomRepositoryer) RemoveWhiteListDomain(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWhiteListDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWhiteListDomain indicates an expected call of RemoveWhiteListDomain.
func (mr *MockWaitingroomRepositoryerMockRecorder) RemoveWhiteListDomain(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWhiteListDomain", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).RemoveWhiteListDomain), arg0, arg1)
}

// SaveCurrentNumber mocks base method.
func (m *MockWaitingroomRepositoryer) SaveCurrentNumber(arg0 context.Context, arg1 string, arg2 int64, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCurrentNumber", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCurrentNumber indicates an expected call of SaveCurrentNumber.
func (mr *MockWaitingroomRepositoryerMockRecorder) SaveCurrentNumber(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCurrentNumber", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).SaveCurrentNumber), arg0, arg1, arg2, arg3)
}

// SaveCurrentPermitNumber mocks base method.
func (m *MockWaitingroomRepositoryer) SaveCurrentPermitNumber(arg0 context.Context, arg1 string, arg2 int64, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCurrentPermitNumber", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCurrentPermitNumber indicates an expected call of SaveCurrentPermitNumber.
func (mr *MockWaitingroomRepositoryerMockRecorder) SaveCurrentPermitNumber(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCurrentPermitNumber", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).SaveCurrentPermitNumber), arg0, arg1, arg2, arg3)
}

// SaveLastNumber mocks base method.
func (m *MockWaitingroomRepositoryer) SaveLastNumber(arg0 context.Context, arg1 string, arg2 int64, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLastNumber", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLastNumber indicates an expected call of SaveLastNumber.
func (mr *MockWaitingroomRepositoryerMockRecorder) SaveLastNumber(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLastNumber", reflect.TypeOf((*MockWaitingroomRepositoryer)(nil).SaveLastNumber), arg0, arg1, arg2, arg3)
}
